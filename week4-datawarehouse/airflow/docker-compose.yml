version: '3.9'

# ============================================
# Apache Airflow - Workflow Orchestration
# LocalExecutor Configuration
# ============================================

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.7.3-python3.11
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow123@postgres-airflow/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./scripts:/opt/airflow/scripts
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres-airflow:
      condition: service_healthy
  networks:
    - datawarehouse_network

services:
  # ============================================
  # PostgreSQL for Airflow Metadata
  # ============================================
  postgres-airflow:
    image: postgres:16-alpine
    container_name: postgres_airflow
    restart: unless-stopped
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow123
      POSTGRES_DB: airflow
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    networks:
      - datawarehouse_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Airflow Init (One-time setup)
  # ============================================
  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins
        chown -R "${AIRFLOW_UID:-50000}:0" /opt/airflow/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow123
    user: "0:0"

  # ============================================
  # Airflow Webserver
  # ============================================
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    restart: unless-stopped
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # ============================================
  # Airflow Scheduler
  # ============================================
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    restart: unless-stopped
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # ============================================
  # Airflow Triggerer (for deferrable operators)
  # ============================================
  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow_triggerer
    restart: unless-stopped
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    profiles:
      - triggerer  # Optional

# ============================================
# Networks
# ============================================
networks:
  datawarehouse_network:
    name: datawarehouse_network
    driver: bridge
    external: true  # Week 4'ün ana docker-compose'unda oluşturulmuş

# ============================================
# Volumes
# ============================================
volumes:
  postgres_airflow_data:
    name: postgres_airflow_data